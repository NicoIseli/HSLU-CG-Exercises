// Vertex-Data
  const vertexData = [
      0, 1, 0,
      1, -1, 0,
      -1, -1, 0
  ];


// Create Buffer
  const buffer = gl.createBuffer();


// Load Vertex Data into Buffer
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexData));


// Create Vertex Shader
  const vertexShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vertexShader, "
      attribute vec3 position;
      void main(){
        gl_Position = vec4(position, 1);
      }
  ");
  gl.compileShader(vertexShader);


// Create Fragment Shader
  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fragmentShader, "
      void main(){
        gl_FragColor = vec4(1, 0, 0, 1);
      }
  ");
  gl.compileShader(fragmentShader);


// Create Program
  const program = gl.createProgram();

// Attach Shaders To Program
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);

// Enable Vertex Attribute
  const positionLocation = gl.getAttribLocation(program, 'position');
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 3, gl.Float, false, 0, 0);


// Draw
  gl.useProgram(program);
  gl.drawArrays(gl.Triangles, 0, 3);
